(()=>{"use strict";var e={27:(e,n,t)=>{t.d(n,{Z:()=>c});var r=t(537),o=t.n(r),i=t(645),a=t.n(i)()(o());a.push([e.id,"* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nul {\n    list-style: none;\n}\n\n.panel {\n    display: flex;\n    margin: 0 auto;\n    max-width: 1200px;\n    padding: 30px 0;\n}\n\n.panel__excursins {\n    width: 70%;\n}\n\n.excursions {\n    display: flex;\n    flex-wrap: wrap;\n}\n\n.excurions__item {\n    border: 1px solid #bbb;\n    border-radius: 5px;\n    margin: 10px;\n    padding: 20px;\n    width: calc(50% - 20px);\n}\n\n.excursions__item--prototype {\n    display: none\n}\n\n.panel__form {\n    background-color: #f4f4f4;\n    padding: 20px;\n    width: 30%;\n}\n\n.uploader, .order {\n    border-bottom: 1px solid #bbb;\n    margin-bottom: 20px;\n    padding-bottom: 20px;\n}\n\n.form__field {\n    display: block;\n}\n\n.form__field--longtext {\n    height: 100px;\n}","",{version:3,sources:["webpack://./src/css/admin.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,UAAU;IACV,sBAAsB;AAC1B;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,cAAc;IACd,iBAAiB;IACjB,eAAe;AACnB;;AAEA;IACI,UAAU;AACd;;AAEA;IACI,aAAa;IACb,eAAe;AACnB;;AAEA;IACI,sBAAsB;IACtB,kBAAkB;IAClB,YAAY;IACZ,aAAa;IACb,uBAAuB;AAC3B;;AAEA;IACI;AACJ;;AAEA;IACI,yBAAyB;IACzB,aAAa;IACb,UAAU;AACd;;AAEA;IACI,6BAA6B;IAC7B,mBAAmB;IACnB,oBAAoB;AACxB;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,aAAa;AACjB",sourcesContent:["* {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n}\r\n\r\nul {\r\n    list-style: none;\r\n}\r\n\r\n.panel {\r\n    display: flex;\r\n    margin: 0 auto;\r\n    max-width: 1200px;\r\n    padding: 30px 0;\r\n}\r\n\r\n.panel__excursins {\r\n    width: 70%;\r\n}\r\n\r\n.excursions {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n}\r\n\r\n.excurions__item {\r\n    border: 1px solid #bbb;\r\n    border-radius: 5px;\r\n    margin: 10px;\r\n    padding: 20px;\r\n    width: calc(50% - 20px);\r\n}\r\n\r\n.excursions__item--prototype {\r\n    display: none\r\n}\r\n\r\n.panel__form {\r\n    background-color: #f4f4f4;\r\n    padding: 20px;\r\n    width: 30%;\r\n}\r\n\r\n.uploader, .order {\r\n    border-bottom: 1px solid #bbb;\r\n    margin-bottom: 20px;\r\n    padding-bottom: 20px;\r\n}\r\n\r\n.form__field {\r\n    display: block;\r\n}\r\n\r\n.form__field--longtext {\r\n    height: 100px;\r\n}"],sourceRoot:""}]);const c=a},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(a[s]=!0)}for(var d=0;d<e.length;d++){var l=[].concat(e[d]);r&&a[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),n.push(l))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[n].concat([i]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var i={},a=[],c=0;c<e.length;c++){var s=e[c],d=r.base?s[0]+r.base:s[0],l=i[d]||0,u="".concat(d," ").concat(l);i[d]=l+1;var p=t(u),A={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)n[p].references++,n[p].updater(A);else{var f=o(A,r);r.byIndex=c,n.splice(c,0,{identifier:u,updater:f,references:1})}a.push(u)}return a}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var c=t(i[a]);n[c].references--}for(var s=r(e,o),d=0;d<i.length;d++){var l=t(i[d]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}i=s}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var i=n[r]={id:r,exports:{}};return e[r](i,i.exports,t),i.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0,(()=>{var e=t(379),n=t.n(e),r=t(795),o=t.n(r),i=t(569),a=t.n(i),c=t(565),s=t.n(c),d=t(216),l=t.n(d),u=t(589),p=t.n(u),A=t(27),f={};f.styleTagTransform=p(),f.setAttributes=s(),f.insert=a().bind(null,"head"),f.domAPI=o(),f.insertStyleElement=l(),n()(A.Z,f),A.Z&&A.Z.locals&&A.Z.locals;const m=[{name:"title",label:"Nazwa",required:!0},{name:"description",label:"Opis",required:!0},{name:"adultPrice",label:"Cena dorosły",type:"number",required:!0},{name:"childPrice",label:"Cena dziecko",type:"number",required:!0}];let h=[];const x=new class{constructor(){this.url="http://localhost:3000"}load(e){return this._fetch(e).catch((e=>console.error(e)))}add(e,n){const t={method:"POST",body:JSON.stringify(e),headers:{"Content-Type":"application/json"}};return this._fetch(n,t).catch((e=>console.log(e)))}remove(e,n){return this._fetch(`${n}/${e}`,{method:"DELETE"}).catch((e=>console.log(e)))}update(e,n){return this._fetch(e,n).catch((e=>console.log(e)))}_fetch(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",n=arguments.length>1?arguments[1]:void 0;return fetch(this.url+e,n).then((e=>e.ok?e.json():Promise.reject(e)))}},b=document.querySelector(".form");function y(){x.load("/excursions").then((e=>function(e){const n=document.querySelector(".panel__excursions");(function(e){[...e.children].forEach((n=>{n.classList.contains("excursions__item--prototype")||e.removeChild(n)}))})(n),function(e,n){const t=document.querySelector(".excursions__item--prototype");e.forEach((e=>{const r=t.cloneNode(!0);r.dataset.id=e.id;const o=r.querySelector(".excursions__title"),i=r.querySelector(".excursions__description"),a=r.querySelector(".excursions__adult-price"),c=r.querySelector(".excursions__child-price");o.textContent=e.title,i.textContent=e.description,a.textContent=Number(e.adultPrice),c.textContent=Number(e.childPrice),r.classList.remove("excursions__item--prototype"),n.appendChild(r)}))}(e,n)}(e)))}function v(e,n){n.style.color=e}document.addEventListener("DOMContentLoaded",(function(){console.log("admin"),y(),b&&b.addEventListener("submit",(e=>{e.preventDefault(),function(){h=[];const e=document.querySelector(".error-list");e&&(e.innerHTML="")}();const n=function(){const[e,n,t,r]=b.elements;return{title:e.value,description:n.value,adultPrice:t.value,childPrice:r.value}}();m.forEach((e=>{const n=b.elements[e.name],t=n.parentNode,r=n.value;v("black",t),e.required&&0===r.length&&(h.push('Dane w polu "'+e.label+'" są wymagane'),v("red",t)),"number"===e.type&&r<0&&(h.push('Wartość w polu "'+e.label+'" nie może być mniejsza od 0'),v("red",t))})),0===h.length?function(e){x.add(e,"/excursions").then((()=>y()))}(n):function(){const e=document.querySelector(".error-list");h.forEach((n=>{const t=document.createElement("li");t.textContent=n,v("red",t),e.appendChild(t)}))}()})),document.querySelector(".panel__excursions").addEventListener("click",(e=>{if(e.preventDefault(),"usuń"===e.target.value){const n=e.target.parentNode.parentNode.parentNode.dataset.id;x.remove(n,"/excursions").then((()=>y()))}})),document.querySelector(".panel__excursions").addEventListener("click",(e=>{if(e.target.classList.contains("excursions__field-input--update")){const n=e.target.parentNode.parentNode.parentNode,t=n.querySelector(".excursions__field-input--update"),r=[...n.querySelectorAll(".excursions--editable")],o=function(e){return e.every((e=>e.isContentEditable))}(r);if(o){const e=n.dataset.id,o=function(e){let[n,t,r,o]=e;return{title:n.textContent,description:t.textContent,adultPrice:Number(r.textContent),childPrice:Number(o.textContent)}}(r),i={method:"PUT",body:JSON.stringify(o),headers:{"Content-Type":"application/json"}};isNaN(o.adultPrice)||isNaN(o.childPrice)?alert('Pole "dorosły" oraz pole "dziecko" muszą być liczbą'):x.update(`/excursions/${e}`,i).then((()=>{t.value="edytuj",r.forEach((e=>e.contentEditable=!1))}))}else t.value="zapisz",r.forEach((e=>e.contentEditable=!0))}}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,